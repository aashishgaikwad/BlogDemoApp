{"version":3,"sources":["components/Header.js","components/Post.js","components/ShowMessage.js","components/ListPosts.js","components/ViewPost.js","components/PostItemForm.js","components/AddNewPost.js","components/EditPost.js","routers/AppRouter.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","background","padding","color","textAlign","linkStyle","textDecoration","Header","style","to","Post","id","title","body","key","className","ShowMessage","messageType","ListPosts","useState","posts","setPosts","setMessageType","useEffect","fetch","then","res","ok","json","Error","status","responseData","catch","error","length","map","post","idStyle","float","fontSize","fontWeight","ViewPost","match","params","setPost","pathname","state","userId","PostItemForm","props","setTitle","setBody","setError","onSubmit","e","preventDefault","htmlFor","type","name","onChange","target","value","AddNewPost","loader","setLoader","method","JSON","stringify","Math","floor","random","headers","response","EditPost","location","AppRouter","exact","path","component","App","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.3c76f009.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Header = () => {\n    return (\n        <header style={headerStyle}>\n            <h1>React Blog</h1>\n            <Link style={linkStyle} to=\"/\">\n\t\t\t\tHome\n            </Link>\n            {' '}\n\t\t\t|\n            <Link style={linkStyle} to=\"/addPost\">\n                {' '}\n\t\t\t\tAdd Post\n            </Link>\n        </header>\n    );\n};\nconst headerStyle = {\n    background: '#333',\n    padding: '10px',\n    color: '#fff',\n    textAlign: 'center'\n};\n\nconst linkStyle = {\n    color: '#fff',\n    textDecoration: 'none'\n};\n\nexport default Header;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Post = ({ id, title, body }) => {\n    return (\n        <div key={id} className=\"post\">\n            <Link to={`/post/${id}`}>\n                <h3>{title}</h3>\n            </Link>\n            <p>{body}</p>\n        </div>\n    );\n};\n\nexport default Post;\n","import React from 'react';\n\nconst ShowMessage = ({ messageType }) => {\n    const errorMessage = 'Service is unavailable. Please try after sometime.';\n    const successMessage = 'Request completed successfully.';\n    return (\n        <div>\n            {messageType === 'success' && <p className=\"success\"> {successMessage} </p>}\n            {messageType === 'error' && <p className=\"error\"> {errorMessage} </p>}\n        </div>\n    );\n};\n\nexport default ShowMessage;\n","import React, { useState, useEffect } from 'react';\nimport Post from './Post';\nimport ShowMessage from './ShowMessage';\n\nconst ListPosts = () => {\n    const [ posts, setPosts ] = useState([]);\n    const [ messageType, setMessageType ] = useState('');\n\n    useEffect(() => {\n        fetch('https://jsonplaceholder.typicode.com/posts')\n            .then((res) => {\n                if (res.ok) {\n                    return res.json();\n                }\n                throw new Error(res.status);\n            })\n            .then((responseData) => {\n                setPosts(responseData);\n            })\n            .catch((error) => {\n                setMessageType('error');\n            });\n    }, []);\n    return messageType === '' ? posts.length ? (\n        posts.map((post) => <Post key={post.id} {...post} />)\n    ) : (\n        <h3 className=\"center\">Loading posts...</h3>\n    ) : (\n        <div className=\"center\">\n            <ShowMessage messageType={messageType} />\n        </div>\n    );\n};\n\nexport default ListPosts;\n","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport ShowMessage from './ShowMessage';\n\nconst ViewPost = ({ match: { params: { id } } }) => {\n    const [ post, setPost ] = useState(null);\n    const [ messageType, setMessageType ] = useState('');\n\n    useEffect(\n        () => {\n            fetch(`https://jsonplaceholder.typicode.com/posts/${id}`)\n                .then((res) => res.json())\n                .then((post) => {\n                    setPost(post);\n                })\n                .catch((error) => {\n                    setMessageType('error');\n                });\n        },\n        [ id ]\n    );\n    return messageType === '' ? post ? (\n        <div className=\"post\">\n            <div>\n                <span style={idStyle}> Id : {post.id}</span>\n                <h3> {post.title} </h3>\n                <p> {post.body} </p>\n                <Link\n                    to={{\n                        pathname: `/editPost/${id}`,\n                        state: {\n                            title: post.title,\n                            body: post.body,\n                            userId: post.userId\n                        }\n                    }}\n                >\n\t\t\t\t\tEdit Post\n                </Link>\n                <span style={idStyle}> By User : {post.userId}</span>\n            </div>\n        </div>\n    ) : (\n        <p className=\"center\">Loading...</p>\n    ) : (\n        <div className=\"center\">\n            <ShowMessage messageType={messageType} />\n        </div>\n    );\n};\nconst idStyle = { float: 'right', fontSize: '0.8rem', fontWeight: 'bold' };\n\nexport default ViewPost;\n","import React, { useState } from 'react';\n\nconst PostItemForm = (props) => {\n    const [ title, setTitle ] = useState(props.title ? props.title : '');\n    const [ body, setBody ] = useState(props.body ? props.body : '');\n    const [ error, setError ] = useState('');\n    const submitHandler = (e) => {\n        e.preventDefault();\n        if (!title || !body) {\n            setError('Please provide title and body.');\n        } else {\n            setError('');\n            props.onSubmit({\n                title,\n                body\n            });\n        }\n    };\n    return (\n        <div>\n            <h3>Enter Details</h3>\n            <form onSubmit={submitHandler}>\n                <label htmlFor=\"title\">Title: </label>\n                <br />\n                <input type=\"text\" name=\"title\" id=\"title\" className=\"textBox\" onChange={(e) => setTitle(e.target.value)} value={title} />\n                <br />\n                <br />\n                <label htmlFor=\"body\">Body: </label>\n                <br />\n                <textarea name=\"body\" id=\"body\" className=\"textAreaBox\" onChange={(e) => setBody(e.target.value)} value={body} />\n                <br />\n                <span className=\"error\">{error}</span>\n                <br />\n                <br />\n                <input type=\"submit\" value=\"Submit\" className=\"submit\" />\n            </form>\n        </div>\n    );\n};\n\nexport default PostItemForm;\n","import React, { useState } from 'react';\nimport PostItemForm from './PostItemForm';\nimport ShowMessage from './ShowMessage';\n\nconst AddNewPost = () => {\n    const [ messageType, setMessageType ] = useState('');\n    const [loader, setLoader ] = useState(false);\n    const onSubmitHandler = ({ title, body }) => {\n        setMessageType('');\n        setLoader(true);\n        fetch('https://jsonplaceholder.typicode.com/posts', {\n            method: 'POST',\n            body: JSON.stringify({\n                title: title,\n                body: body,\n                userId: Math.floor(Math.random * 100)\n            }),\n            headers: {\n                'Content-type': 'application/json; charset=UTF-8'\n            }\n        })\n            .then((response) => response.json())\n            .then((post) => {\n                setMessageType('success');\n                setLoader(false);\n            })\n            .catch((error) => {\n                setMessageType('error');\n                setLoader(false);\n            });\n    };\n    return (\n        <div>\n            <div className=\"divStyle\">\n                <PostItemForm onSubmit={onSubmitHandler} />\n                <ShowMessage messageType={messageType} />\n            </div>\n            { loader && <div className=\"loader\" /> }\n        </div>\n    );\n};\n\nexport default AddNewPost;\n","import React, { useState } from 'react';\nimport PostItemForm from './PostItemForm';\nimport ShowMessage from './ShowMessage';\n\nconst EditPost = (props) => {\n    const id = props.match.params.id;\n    const userId = props.location.state.userId;\n    const [ messageType, setMessageType ] = useState('');\n    const [ loader, setLoader ] = useState(false);\n\n    const onSubmitHandler = ({ title, body }) => {\n        setMessageType('');\n        setLoader(true);\n        fetch(`https://jsonplaceholder.typicode.com/posts/${id}`, {\n            method: 'PUT',\n            body: JSON.stringify({\n                id: id,\n                title: title,\n                body: body,\n                userId: userId\n            }),\n            headers: {\n                'Content-type': 'application/json; charset=UTF-8'\n            }\n        })\n            .then((response) => response.json())\n            .then((post) => {\n                setMessageType('success');\n                setLoader(false);\n            })\n            .catch((error) => {\n                setMessageType('error');\n                setLoader(false);\n            });\n    };\n    return (\n        <div>\n            <div className=\"divStyle\">\n                <PostItemForm\n                    onSubmit={onSubmitHandler}\n                    title={props.location.state.title}\n                    body={props.location.state.body}\n                />\n                <ShowMessage messageType={messageType} />\n            </div>\n            {loader && <div className=\"loader\" />}\n        </div>\n    );\n};\n\nexport default EditPost;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport Header from '../components/Header';\nimport ListPosts from '../components/ListPosts';\nimport ViewPost from '../components/ViewPost';\nimport AddNewPost from '../components/AddNewPost';\nimport EditPost from '../components/EditPost';\n\nconst AppRouter = () => (\n\t<BrowserRouter>\n\t\t<div>\n\t\t\t<Header />\n\t\t\t<Switch>\n\t\t\t\t<Route exact path=\"/\" component={ListPosts} />\n\t\t\t\t<Route exact path=\"/post/:id\" component={ViewPost} />\n\t\t\t\t<Route exact path=\"/addPost\" component={AddNewPost} />\n\t\t\t\t<Route exact path=\"/editPost/:id\" component={EditPost} />\n\t\t\t\t<Redirect to=\"/\" />\n\t\t\t</Switch>\n\t\t</div>\n\t</BrowserRouter>\n);\n\nexport default AppRouter;\n","import React from 'react';\nimport AppRouter from './routers/AppRouter';\n\nconst App = () => {\n\treturn (\n\t\t<div>\n\t\t\t<AppRouter />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}